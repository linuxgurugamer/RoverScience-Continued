

CONTRACT_GROUP
{
	name			= RoverScienceMod
	displayName		= Rover Science
    agent			= Space Penguins Inc
	minVersion		= 1.15.0
	maxSimultaneous		= 4
}

                   
CONTRACT_TYPE
{
    name = RoverExploreWhyren
    title = Rover Expedition
    group = RoverScienceMod
	
    description = The science team has identified an area of scientific interest and believes that @/targetVessel on @/targetBody should be directed to investigate.
	genericDescription = Search for science with a rover
    notes = Pilot your rover to the indicated location and perform all the science you can at that site.
    synopsis = Drive @/targetVessel on @/targetBody to this location.
    completedMessage = Research complete!  Good work.
    deadline = 50
    targetBody = @/targetVessel.CelestialBody()
    maxSimultaneous = 2
    rewardReputation = 1.0
    rewardFunds = 10000.0
    failureReputation = 5.0
    failureFunds = 20000.0
    advanceFunds = 0

    DATA
    {
        type = Vessel
		requiredValue = true
        targetVessel = AllVessels().Where(v => v.VesselType() == Rover && v.IsLanded() == true).Random()
		title = Must have a landed rover
    }
	
	DATA
	{
		type = double
		targetRadius = @/targetBody.Radius()
		homeRadius = HomeWorld().Radius()
		distanceFactorTemp = @targetRadius == 0 ? 1 : @targetRadius/@homeRadius + 0.3
		distanceFactor = @distanceFactorTemp / 2

		TrivialMin = 3000 * @distanceFactor
		SignificantMin = 5000 * @distanceFactor
		ExceptionalMin = 7000 * @distanceFactor
		TrivialMax = 4000 * @distanceFactor
		SignificantMax = 6000 * @distanceFactor
		ExceptionalMax = 8000 * @distanceFactor

		//TrivialMin = 600 * @distanceFactor
		//SignificantMin = 1000 * @distanceFactor
		//ExceptionalMin = 1400 * @distanceFactor
		//TrivialMax = 800 * @distanceFactor
		//SignificantMax = 1200 * @distanceFactor
		//ExceptionalMax = 1600 * @distanceFactor

	}

	DATA
	{
		type = bool
		isTrivial = Prestige() == Trivial
		isSignificant = Prestige() == Significant
		isExceptional = Prestige() == Exceptional
		hasTherm = @/targetVessel.Parts().Where(p => p == sensorThermometer).Count() > 0
		hasBar = @/targetVessel.Parts().Where(p => p == sensorBarometer).Count() > 0
		hasAccel = @/targetVessel.Parts().Where(p => p == sensorAccelerometer).Count() > 0
		hasGrav = @/targetVessel.Parts().Where(p => p == sensorGravimeter).Count() > 0
		hasGoo = @/targetVessel.Parts().Where(p => p == GooExperiment).Count() > 0
		hasMat = @/targetVessel.Parts().Where(p => p == science_module).Count() > 0
		hasAtmo = @/targetVessel.Parts().Where(p => p == sensorAtmosphere).Count() > 0
		hasScientist = @/targetVessel.Crew().Where(k => k.ExperienceTrait() == "Scientist").Count() > 0
		hasAtmosphere = @/targetBody.HasAtmosphere()
		title = Must all required experiments
	}

	/////////////////////


	// Hardcoded list of specific experiments
    DATA
    {
        type = List<ScienceExperiment>
        experiments = [RoverScienceExperiment, surfaceSample, temperatureScan, barometerScan, seismicScan, gravityScan, mysteryGoo, atmosphereAnalysis, mobileMaterialsLab]
    }

    DATA
    {
        type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
        //scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
        //scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Random(1, 3)
		scienceSubjects = @scienceSubjectsTemp2.Add(RoverScienceExperiment)
    }

    DATA
    {
        type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects.Count() > 0

        title = Must have a valid experiment to run
    }

	/////////////////////


	// May make the following optional in the future
	REQUIREMENT
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked

		partModule = RoverScience
	}

	PARAMETER
	{
		name = Sequence
		type = Sequence
	
		hiddenParameter = Location2Arrival
		hiddenParameter = Location3Arrival
		hiddenParameter = Location3AllObjectives

		PARAMETER
		{
			name = Location1Arrival
			type = VisitWaypoint
			index = 1
			title = i. Direct rover to the first Interesting Place 

			//horizontalDistance = 250.0
			distance = 250.0
			hideOnCompletion = true
			disableOnStateChange = true
			showMessages = true
			completeInSequence = true
		}

		//PARAMETER
		//{
		//	name = Location1AllObjectives
		//	type = Sequence
		//	disableOnStateChange = false
		//	title = Rover Expedition
		//
		//	hideOnCompletion = true
		//	completeInSequence = true
		//}
		PARAMETER
		{
			name = Location1AllObjectives
			type = All
			title = Conduct research at the Interesting Place
			disableOnStateChange = true
			title = Rover Expedition
		
			hideOnCompletion = true
			completeInSequence = true

		    PARAMETER
			{
				type = CollectScience
				name = Collect Science
				//biome = @scienceSubject.Biome()
				//situation = srfLanded // @scienceSubject.Situation()
				experiment = @scienceSubject.Experiment()
				recoveryMethod = None
				//recoveryMethod = @/recoveryMethod

				rewardFunds = Random(15000.0, 16000.0)

				REQUIREMENT
				{
					name = Location1Requirement
					type = Expression
					expression = @/hasScientist 
				}

				ITERATOR
				{
					type = ScienceSubject
					scienceSubject = @/scienceSubjects
				}
			}
		}


		PARAMETER
		{
			name = Location2Arrival
			type = VisitWaypoint
			index = 2
			title = ii. Direct rover to the next Interesting Place 

			distance = 250.0
			disableOnStateChange = true
			showMessages = true
			completeInSequence = true
		}

		//PARAMETER
		//{
		//	name = Location2AllObjectives
		//	type = Sequence
		//	disableOnStateChange = false
		//	title = Rover Expedition
		//
		//	hideOnCompletion = true
		//	completeInSequence = true
		//}
		PARAMETER
		{
			name = Location2AllObjectives
			type = All
			title = Conduct research at the Interesting Place
			disableOnStateChange = true
			title = Rover Expedition
		
			hideOnCompletion = true
			completeInSequence = true

		    PARAMETER
			{
				type = CollectScience
				name = Collect Science
				//biome = @scienceSubject.Biome()
				//situation = srfLanded // @scienceSubject.Situation()
				experiment = @scienceSubject.Experiment()
				recoveryMethod = None
				//recoveryMethod = @/recoveryMethod

				rewardFunds = Random(15000.0, 16000.0)

				REQUIREMENT
				{
					name = Location1Requirement
					type = Expression
					expression = @/hasScientist 
				}

				ITERATOR
				{
					type = ScienceSubject
					scienceSubject = @/scienceSubjects
				}
			}
		}


		PARAMETER
		{
			name = Location3Arrival
			type = VisitWaypoint
			index = 3
			title = iii. Direct rover to the third Interesting Place 
			completeInSequence = true

			distance = 250.0
			disableOnStateChange = true
			showMessages = true
			completeInSequence = true
		}

		PARAMETER
		{
			name = Location3AllObjectives
			type = Sequence
			disableOnStateChange = false
			title = Rover Expedition
		
			hideOnCompletion = true
			completeInSequence = true

		    PARAMETER
			{
				type = CollectScience

				//biome = @scienceSubject.Biome()
				situation = srfLanded // @scienceSubject.Situation()
				experiment = @scienceSubject.Experiment()
				recoveryMethod = None
				//recoveryMethod = @/recoveryMethod

				rewardFunds = Random(15000.0, 16000.0)

				ITERATOR
				{
					type = ScienceSubject
					scienceSubject = @/scienceSubjects
				}
			}
		}
	}

	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator

		WAYPOINT
		{
			name = Rover Location
			hidden = true
			icon = report
			altitude = 0.0
			latitude = @/targetVessel.Location().Latitude()
			longitude = @/targetVessel.Location().Longitude()
		}

		RANDOM_WAYPOINT_NEAR
		{
			name = Interesting Place
			icon = report
			hidden = false
			altitude = 0.0
			waterAllowed = false
			nearIndex = 0
			//clustered = true
			chained = true

			minDistance = Prestige() == Trivial ? @/TrivialMin : Prestige() == Significant ? @/SignificantMin : @/ExceptionalMin
			maxDistance = Prestige() == Trivial ? @/TrivialMax : Prestige() == Significant ? @/SignificantMax : @/ExceptionalMax
		}
		RANDOM_WAYPOINT_NEAR
		{
			name = Another interesting Place
			icon = report
			hidden = false
			altitude = 0.0
			waterAllowed = false
			nearIndex = 1
			parameter = Location1AllObjectives

			minDistance = Prestige() == Trivial ? @/TrivialMin : Prestige() == Significant ? @/SignificantMin : @/ExceptionalMin
			maxDistance = Prestige() == Trivial ? @/TrivialMax : Prestige() == Significant ? @/SignificantMax : @/ExceptionalMax
		}
		RANDOM_WAYPOINT_NEAR
		{
			name = Yet another interesting Place
			icon = report
			hidden = false
			altitude = 0.0
			waterAllowed = false
			nearIndex = 2
			parameter = Location2AllObjectives

			minDistance = Prestige() == Trivial ? @/TrivialMin : Prestige() == Significant ? @/SignificantMin : @/ExceptionalMin
			maxDistance = Prestige() == Trivial ? @/TrivialMax : Prestige() == Significant ? @/SignificantMax : @/ExceptionalMax
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

CONTRACT_TYPE
{
    name = RoverDeployWhyren
    title = Rover Deployment
    group = RoverScienceMod
	
    description = Much of @/targetBody is a mystery to us still.  We could learn a lot by deploying a new rover there.
	genericDescription = Deloy a new rover
    notes = Launch a new rover to @/targetBody.  Include all the scientific instrumentation you can! 
    synopsis = Launch a new rover to @/targetBody
    completedMessage = The rover is on location and ready for research!
    deadline = 10000
    targetBody = @/planet
    maxSimultaneous = 2
    rewardReputation = 2
    rewardFunds = 10000
    failureReputation = 4
    failureFunds = 20000
    advanceFunds = 10000

    DATA
    {
        type = CelestialBody
        planet = Prestige() == Trivial ? @/easyPlanets.Random() : Prestige() == Significant ? @/mediumPlanets.Random() : @/hardPlanets.Random()
		title = Must be a body previously orbited by a spacecraft
    }	
	
	DATA
	{
		type = CelestialBody
		home = HomeWorld()
	}
	
	DATA
	{
		//hidden = true
		title = Planetary body orbited
		type = List<CelestialBody>
		easyPlanets = HomeWorld().Children()
		mediumPlanets = OrbitedBodies().Where(b => b.HasSurface()).ExcludeAll(@easyPlanets).Exclude(HomeWorld())
		hardPlanets = OrbitedBodies().Where(b => b.HasSurface()).ExcludeAll(@mediumPlanets)
		requiredValue = false
	}

	DATA
	{
		type = bool
		isTrivial = Prestige() == Trivial
		isSignificant = Prestige() == Significant
		isExceptional = Prestige() == Exceptional
		//hasTherm = @/targetVessel.Parts().Where(p => p == sensorThermometer).Count() > 0
		//hasBar = @/targetVessel.Parts().Where(p => p == sensorBarometer).Count() > 0
		//hasAccel = @/targetVessel.Parts().Where(p => p == sensorAccelerometer).Count() > 0
		//hasGrav = @/targetVessel.Parts().Where(p => p == sensorGravimeter).Count() > 0
		//hasGoo = @/targetVessel.Parts().Where(p => p == GooExperiment).Count() > 0
		//hasMat = @/targetVessel.Parts().Where(p => p == science_module).Count() > 0
		//hasAtmo = @/targetVessel.Parts().Where(p => p == sensorAtmosphere).Count() > 0
		//hasScientist = @/targetVessel.Crew().Where(k => k.ExperienceTrait() == "Scientist").Count() > 0
		//hasAtmosphere = @/targetBody.HasAtmosphere()
		title = Must all required experiments
	}


	// Hardcoded list of specific experiments
    DATA
    {
        type = List<ScienceExperiment>
        experiments = [surfaceSample, temperatureScan, barometerScan, seismicScan, gravityScan, mysteryGoo, atmosphereAnalysis]
		parts = [sensorAtmosphere, GooExperiment, Magnetometer, sensorAccelerometer, sensorBarometer, sensorGravimeter, sensorThermometer]
    }

	DATA
    {
        type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
        scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
        scienceSubjects = @scienceSubjectsTemp3.Random(1, 3)
    }

    DATA
    {
        type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }



	REQUIREMENT
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked
		partModuleType = Antenna
		partModuleType = Wheel
	}

	REQUIREMENT
	{
		name = PartModuleUnlocked
		type = PartModuleUnlocked

		// PartModule that needs to be unlocked.
		//
		// Type:      string
		// Required:  Yes (multiples allowed)
		//
		partModule = RoverScience
	}

	PARAMETER
	{
		name = NewVessel
		type = NewVessel
		title = Launch a new rover
	}
	
	PARAMETER
	{
		name = PartValidation1
		type = PartValidation

		part = sensorAtmosphere
		part = GooExperiment
		part = Magnetometer
		part = sensorAccelerometer
		part = sensorBarometer
		part = sensorGravimeter
		part = sensorThermometer
	}

	PARAMETER
	{
		name = ReachState
		type = ReachState
		situation = LANDED
	}
	
	PARAMETER
	{
		name = VesselIsType
		type = VesselIsType
		vesselType = Rover
		title = Set vessel type to Rover
	}	

	PARAMETER
	{
		name = Location1AllObjectives
		type = All
		title = Conduct research at the Interesting Place
		disableOnStateChange = true
		title = Rover Expedition
		
		//completeInSequence = true

		PARAMETER
		{
			name = RoverScience
			type = CollectScience
			experiment = RoverScienceExperiment
			recoveryMethod = None
			rewardScience = 0.25
		}


		PARAMETER
		{
			name = Location3RoverScience
			type = CollectScience
			experiment = RoverScienceExperiment
			recoveryMethod = None
			rewardScience = 0.25
		}

		PARAMETER
		{
			name = Location3TemperatureScan
			type = CollectScience
			experiment = temperatureScan
			recoveryMethod = None
			rewardScience = 0.25
				
			//REQUIREMENT
			//{
			//	name = Location3TemperatureScanRequirement
			//	type = Expression
			//	expression = @/hasTherm
			//}
		}
		PARAMETER
		{
			name = Location3PressureScan
			type = CollectScience
			experiment = barometerScan
			recoveryMethod = None
			rewardScience = 0.25
				
			//REQUIREMENT
			//{
			//	name = Location3BarometerScanRequirement
			//	type = Expression
			//	expression = @/hasBar
			//}
		}
		PARAMETER
		{
			name = Location3AccelerometerScan
			type = CollectScience
			experiment = seismicScan
			recoveryMethod = None
			rewardScience = 0.25
				
			//REQUIREMENT
			//{
			//	name = Location3AccelScanRequirement
			//	type = Expression
			//	expression = @/hasAccel
			//}
		}
		PARAMETER
		{
			name = Location3GravityScan
			type = CollectScience
			experiment = gravityScan
			recoveryMethod = None
			rewardScience = 0.25
				
			//REQUIREMENT
			//{
			//	name = Location3GravScanRequirement
			//	type = Expression
			//	expression = @/hasGrav
			//}
		}
		PARAMETER
		{
			name = Location3CrewReport
			type = CollectScience
			experiment = crewReport
			experiment = evaReport
			experiment = surfaceSample
			recoveryMethod = None
			rewardScience = 0.5
				
			//REQUIREMENT
			//{
			//	name = Location3CrewReportRequirement
			//	type = Expression
			//	expression = @/hasScientist
			//}
		}
		PARAMETER
		{
			name = Location3Goo
			type = CollectScience
			experiment = mysteryGoo
			recoveryMethod = None
			rewardScience = 0.5
				
			//REQUIREMENT
			//{
			//	name = Location3GooRequirement
			//	type = Expression
			//	expression = @/hasScientist && @/hasGoo
			//}
		}
		PARAMETER
		{
			name = Location3Mat
			type = CollectScience
			experiment = mobileMaterialsLab
			recoveryMethod = None
			rewardScience = 1.0
				
			//REQUIREMENT
			//{
			//	name = Location3MatRequirement
			//	type = Expression
			//	expression = @/hasScientist && @/hasMat
			//}
		}
		PARAMETER
		{
			name = Location3AtmoScan
			type = CollectScience
			experiment = atmosphereAnalysis
			recoveryMethod = None
			rewardScience = 0.25
				
			//REQUIREMENT
			//{
			//	name = Location3AtmoScanRequirement
			//	type = Expression
			//	expression = @/hasAtmo && @/hasAtmosphere
			//}
		}


	}
}